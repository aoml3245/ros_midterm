{"ast":null,"code":"var _jsxFileName = \"/Users/woni/workspace/ros_lecture/midterm_assignment/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [direction, setDirection] = useState(\"\");\n\n  // 키보드 입력 이벤트 핸들러\n  const handleKeyDown = event => {\n    switch (event.key) {\n      case \"ArrowLeft\":\n        sendDirection(\"LEFT\");\n        break;\n      case \"ArrowRight\":\n        sendDirection(\"RIGHT\");\n        break;\n      default:\n        break;\n    }\n  };\n\n  // 키보드 입력 이벤트 핸들러\n  const handleKeyUp = event => {\n    sendDirection(\"UP\");\n  };\n\n  // 방향 전송 함수\n  const sendDirection = direction => {\n    axios.get(\"http://127.0.0.1:5000/key?key=\" + direction).then(function (response) {\n      setDirection(response.data);\n      console.log(response.data);\n    });\n  };\n\n  // 컴포넌트가 마운트될 때 키보드 이벤트 리스너 등록\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n\n    // 컴포넌트가 언마운트될 때 이벤트 리스너 해제\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []); // 빈 배열을 전달하여 최초 렌더링 시에만 이펙트 실행\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"WebSocket Communication with Keyboard Input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Use arrow keys to send direction to server:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current direction: \", direction]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FTKuqsWvJpXwTurJrvlkl8qQYb4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","App","_s","direction","setDirection","handleKeyDown","event","key","sendDirection","handleKeyUp","get","then","response","data","console","log","window","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/woni/workspace/ros_lecture/midterm_assignment/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport axios from \"axios\";\n\nfunction App() {\n  const [direction, setDirection] = useState(\"\");\n\n  // 키보드 입력 이벤트 핸들러\n  const handleKeyDown = (event) => {\n    switch (event.key) {\n      case \"ArrowLeft\":\n        sendDirection(\"LEFT\");\n        break;\n      case \"ArrowRight\":\n        sendDirection(\"RIGHT\");\n        break;\n      default:\n        break;\n    }\n  };\n\n  // 키보드 입력 이벤트 핸들러\n  const handleKeyUp = (event) => {\n    sendDirection(\"UP\");\n  };\n\n  // 방향 전송 함수\n  const sendDirection = (direction) => {\n    axios\n      .get(\"http://127.0.0.1:5000/key?key=\" + direction)\n      .then(function (response) {\n        setDirection(response.data);\n        console.log(response.data);\n      });\n  };\n\n  // 컴포넌트가 마운트될 때 키보드 이벤트 리스너 등록\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n\n    // 컴포넌트가 언마운트될 때 이벤트 리스너 해제\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []); // 빈 배열을 전달하여 최초 렌더링 시에만 이펙트 실행\n\n  return (\n    <div className=\"App\">\n      <h1>WebSocket Communication with Keyboard Input</h1>\n      <p>Use arrow keys to send direction to server:</p>\n      <p>Current direction: {direction}</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMQ,aAAa,GAAIC,KAAK,IAAK;IAC/B,QAAQA,KAAK,CAACC,GAAG;MACf,KAAK,WAAW;QACdC,aAAa,CAAC,MAAM,CAAC;QACrB;MACF,KAAK,YAAY;QACfA,aAAa,CAAC,OAAO,CAAC;QACtB;MACF;QACE;IACJ;EACF,CAAC;;EAED;EACA,MAAMC,WAAW,GAAIH,KAAK,IAAK;IAC7BE,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;;EAED;EACA,MAAMA,aAAa,GAAIL,SAAS,IAAK;IACnCL,KAAK,CACFY,GAAG,CAAC,gCAAgC,GAAGP,SAAS,CAAC,CACjDQ,IAAI,CAAC,UAAUC,QAAQ,EAAE;MACxBR,YAAY,CAACQ,QAAQ,CAACC,IAAI,CAAC;MAC3BC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACC,IAAI,CAAC;IAC5B,CAAC,CAAC;EACN,CAAC;;EAED;EACAjB,SAAS,CAAC,MAAM;IACdoB,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEZ,aAAa,CAAC;IACjDW,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAER,WAAW,CAAC;;IAE7C;IACA,OAAO,MAAM;MACXO,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEb,aAAa,CAAC;MACpDW,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAET,WAAW,CAAC;IAClD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACET,OAAA;IAAKmB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBpB,OAAA;MAAAoB,QAAA,EAAI;IAA2C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpDxB,OAAA;MAAAoB,QAAA,EAAG;IAA2C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAClDxB,OAAA;MAAAoB,QAAA,GAAG,qBAAmB,EAACjB,SAAS;IAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEV;AAACtB,EAAA,CAnDQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAqDZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}